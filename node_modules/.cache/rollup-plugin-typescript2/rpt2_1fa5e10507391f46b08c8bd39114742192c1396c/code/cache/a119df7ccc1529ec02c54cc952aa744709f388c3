{"code":"\"use strict\";\r\nclass HTMCDefine extends HTMLElement {\r\n    static registry = {};\r\n    static importedFiles = new Set();\r\n    constructor() {\r\n        super();\r\n    }\r\n    async connectedCallback() {\r\n        await this.processImports();\r\n        this.defineComponents();\r\n        this.style.display = 'none';\r\n    }\r\n    async processImports() {\r\n        const imports = Array.from(this.querySelectorAll('htmc-attach'));\r\n        for (let i = 0; i < imports.length; i++) {\r\n            const importElement = imports[i];\r\n            const src = importElement.getAttribute('src');\r\n            if (src && !HTMCDefine.importedFiles.has(src)) {\r\n                HTMCDefine.importedFiles.add(src);\r\n                if (importElement.hasAttribute('defer')) {\r\n                    window.addEventListener('load', () => this.importComponents(src));\r\n                }\r\n                else if (importElement.hasAttribute('lazy')) {\r\n                    const observer = new IntersectionObserver((entries) => {\r\n                        for (let j = 0; j < entries.length; j++) {\r\n                            const entry = entries[j];\r\n                            if (entry.isIntersecting) {\r\n                                this.importComponents(src);\r\n                                observer.unobserve(entry.target);\r\n                            }\r\n                        }\r\n                    });\r\n                    observer.observe(importElement);\r\n                }\r\n                else {\r\n                    await this.importComponents(src);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    defineComponents() {\r\n        const components = Array.from(this.querySelectorAll('component'));\r\n        for (let i = 0; i < components.length; i++) {\r\n            const component = components[i];\r\n            const attributes = component.getAttribute('attributes')?.split(' ') || [];\r\n            const componentName = component.getAttribute('name');\r\n            if (componentName && !customElements.get(componentName)) {\r\n                const template = document.createElement('template');\r\n                template.innerHTML = component.innerHTML;\r\n                const state = attributes.reduce((acc, attr) => {\r\n                    acc[attr] = { value: '' };\r\n                    return acc;\r\n                }, {});\r\n                HTMCDefine.registry[componentName] = {\r\n                    templateContent: template.content.cloneNode(true),\r\n                    attributes,\r\n                    state\r\n                };\r\n                customElements.define(componentName, class extends HTMLElement {\r\n                    shadow;\r\n                    static get observedAttributes() {\r\n                        return HTMCDefine.registry[componentName].attributes;\r\n                    }\r\n                    constructor() {\r\n                        super();\r\n                        this.shadow = this.attachShadow({ mode: 'open' });\r\n                    }\r\n                    connectedCallback() {\r\n                        this.render();\r\n                    }\r\n                    attributeChangedCallback(attrName, oldVal, newVal) {\r\n                        this.updateState(attrName, newVal);\r\n                        this.render();\r\n                    }\r\n                    render() {\r\n                        const registryEntry = HTMCDefine.registry[componentName];\r\n                        if (!registryEntry) {\r\n                            return;\r\n                        }\r\n                        const templateContent = registryEntry.templateContent.cloneNode(true);\r\n                        this.replacePlaceholders(templateContent, componentName);\r\n                        this.shadow.innerHTML = '';\r\n                        this.shadow.appendChild(templateContent);\r\n                    }\r\n                    replacePlaceholders(templateContent, componentName) {\r\n                        const attributes = HTMCDefine.registry[componentName].attributes;\r\n                        for (let i = 0; i < attributes.length; i++) {\r\n                            const attr = attributes[i];\r\n                            const state = HTMCDefine.registry[componentName].state[attr];\r\n                            const attrValue = this.getAttribute(attr) || state.value;\r\n                            const nodes = templateContent.querySelectorAll('*');\r\n                            for (let j = 0; j < nodes.length; j++) {\r\n                                const node = nodes[j];\r\n                                if (node.nodeType === Node.ELEMENT_NODE) {\r\n                                    node.innerHTML = node.innerHTML.replace(new RegExp(`\\\\$\\\\{${attr}\\\\}`, 'g'), attrValue);\r\n                                }\r\n                            }\r\n                        }\r\n                        const innerContent = this.innerHTML;\r\n                        const slots = templateContent.querySelectorAll('slot');\r\n                        for (let i = 0; i < slots.length; i++) {\r\n                            slots[i].innerHTML = innerContent;\r\n                        }\r\n                    }\r\n                    updateState(attrName, newVal) {\r\n                        const state = HTMCDefine.registry[componentName]?.state[attrName];\r\n                        if (state) {\r\n                            state.value = newVal;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    async importComponents(src) {\r\n        try {\r\n            const response = await fetch(src);\r\n            if (response.ok) {\r\n                const text = await response.text();\r\n                const template = document.createElement('template');\r\n                template.innerHTML = text;\r\n                document.body.appendChild(template.content.cloneNode(true));\r\n                const additionalImports = template.content.querySelectorAll('htmc-attach');\r\n                for (let i = 0; i < additionalImports.length; i++) {\r\n                    const importElement = additionalImports[i];\r\n                    const newImport = document.createElement('htmc-attach');\r\n                    newImport.setAttribute('src', importElement.getAttribute('src'));\r\n                    if (importElement.hasAttribute('defer'))\r\n                        newImport.setAttribute('defer', '');\r\n                    if (importElement.hasAttribute('lazy'))\r\n                        newImport.setAttribute('lazy', '');\r\n                    document.body.appendChild(newImport);\r\n                }\r\n            }\r\n            else {\r\n                console.error(`Failed to load component file: ${src}`);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(`Error fetching component file: ${error}`);\r\n        }\r\n    }\r\n}\r\ncustomElements.define('htmc-define', HTMCDefine);\r\nclass HTMCAttach extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n    }\r\n    async connectedCallback() {\r\n        const src = this.getAttribute('src');\r\n        if (src) {\r\n            if (this.hasAttribute('defer')) {\r\n                window.addEventListener('load', () => HTMCDefine.prototype.importComponents(src));\r\n            }\r\n            else if (this.hasAttribute('lazy')) {\r\n                const observer = new IntersectionObserver((entries) => {\r\n                    for (let i = 0; i < entries.length; i++) {\r\n                        const entry = entries[i];\r\n                        if (entry.isIntersecting) {\r\n                            HTMCDefine.prototype.importComponents(src);\r\n                            observer.unobserve(entry.target);\r\n                        }\r\n                    }\r\n                });\r\n                observer.observe(this);\r\n            }\r\n            else {\r\n                await HTMCDefine.prototype.importComponents(src);\r\n            }\r\n        }\r\n    }\r\n}\r\ncustomElements.define('htmc-attach', HTMCAttach);\r\n","references":[]}
